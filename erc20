// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";

contract MyToken is ERC20("Royal Token", "RT") {
    address public administrator; 
    bool public isContractInitialized;  

    event TokensEvent(address indexed fromAddress, address indexed toAddress, uint256 tokenAmount);  

    modifier onlyAdministrator() {
        require(msg.sender == administrator, "This action can only be performed by the administrator.");
        _;
    }

    modifier onlyNotInitialized() {
        require(!isContractInitialized, "Already initialized");
        _;
    }

    function initialize() external onlyNotInitialized {
        administrator = msg.sender;
        _mint(administrator, 200);
        isContractInitialized = true;
    }

    function createTokens(address userAddress, uint256 tokensToSend) external onlyAdministrator {
        require(isContractInitialized, "Contract not yet initialized");
        _mint(userAddress, tokensToSend);
        emit TokensEvent(address(0), userAddress, tokensToSend);
    }

    function destroyTokens(uint256 tokensToSend) external {
        require(isContractInitialized, "Contract not yet initialized");
        require(balanceOf(msg.sender) >= tokensToSend, "Insufficient balance for this operation");
        _burn(msg.sender, tokensToSend);
        emit TokensEvent(msg.sender, address(0), tokensToSend);
    }

    function sendTokens(address toAddress, uint256 tokensToSend) external returns (bool) {
        require(isContractInitialized, "Contract not yet initialized");
        require(toAddress != address(0), "Invalid recipient address");
        _transfer(msg.sender, toAddress, tokensToSend);
        emit TokensEvent(msg.sender, toAddress, tokensToSend);
        return true;
    }
}
